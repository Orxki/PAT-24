unit Admin;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids,
  Vcl.DBGrids, Vcl.StdCtrls, dmIsolytics;

type
  TfrmAdmin = class(TForm)
    DBGrid1: TDBGrid;   // Changed name for consistency
    btnDelete: TButton;
    btnEdit: TButton;
    btnView: TButton;      // Changed name for consistency
    memLogs: TMemo;

    procedure btnImportClick(Sender: TObject);  // For adding new records
    procedure btnDeleteClick(Sender: TObject);  // For deleting selected record
    procedure btnEditClick(Sender: TObject);    // For editing selected record
    procedure btnViewClick(Sender: TObject);

  private
    procedure LogAction(const Msg: string);     // Helper to log actions
    function ValidateInput(const AInput: string; const AFieldName: string): Boolean; // Validate inputs
  public
    { Public declarations }
  end;

var
  frmAdmin: TfrmAdmin;

implementation

{$R *.dfm}

// Helper function to log actions in the memo field
procedure TfrmAdmin.LogAction(const Msg: string);
begin
  memLogs.Lines.Add(DateTimeToStr(Now) + ' - ' + Msg);
end;

// Function to validate input
function TfrmAdmin.ValidateInput(const AInput: string; const AFieldName: string): Boolean;
begin
  Result := Trim(AInput) <> '';
  if not Result then
    ShowMessage(AFieldName + ' cannot be empty.');
end;

// Procedure to import a new record with user inputs from InputBox
procedure TfrmAdmin.btnImportClick(Sender: TObject);
var
  FirstName, UserName, Email, Password: string;
begin
  // Collecting input from the user
  FirstName := InputBox('Input', 'Enter First Name:', '');
  UserName := InputBox('Input', 'Enter User Name:', '');
  Email := InputBox('Input', 'Enter Email:', '');
  Password := InputBox('Input', 'Enter Password:', '');

  // Validate inputs
  if not ValidateInput(FirstName, 'First Name') or
     not ValidateInput(UserName, 'User Name') or
     not ValidateInput(Email, 'Email') or
     not ValidateInput(Password, 'Password') then
    Exit;

  try
    dmIsolytic.tblInformation.Insert;
    dmIsolytic.tblInformation.FieldByName('FirstName').AsString := FirstName;
    dmIsolytic.tblInformation.FieldByName('UserName').AsString := UserName;
    dmIsolytic.tblInformation.FieldByName('Email').AsString := Email;
    dmIsolytic.tblInformation.FieldByName('Password').AsString := Password;
    dmIsolytic.tblInformation.Post;

    LogAction('New record added: Username - ' + UserName);
    ShowMessage('Record successfully added.');
  except
    on E: Exception do
    begin
      ShowMessage('Error adding record: ' + E.Message);
      LogAction('Error adding record: ' + E.Message);
    end;
  end;
end;

// Procedure to delete the selected record
procedure TfrmAdmin.btnDeleteClick(Sender: TObject);
begin
  if dmIsolytic.tblInformation.IsEmpty then
  begin
    ShowMessage('No record selected to delete.');
    Exit;
  end;

  if MessageDlg('Are you sure you want to delete this record?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    try
      LogAction('Record deleted: Username - ' + dmIsolytic.tblInformation.FieldByName('UserName').AsString);
      dmIsolytic.tblInformation.Delete;
      ShowMessage('Record successfully deleted.');
    except
      on E: Exception do
      begin
        ShowMessage('Error deleting record: ' + E.Message);
        LogAction('Error deleting record: ' + E.Message);
      end;
    end;
  end;
end;

// Procedure to edit the selected record with user inputs from InputBox
procedure TfrmAdmin.btnEditClick(Sender: TObject);
var
  FirstName, Email: string;
begin
  if dmIsolytic.tblInformation.IsEmpty then
  begin
    ShowMessage('No record selected to edit.');
    Exit;
  end;

  // Collecting input from the user
  FirstName := InputBox('Input', 'Edit First Name:', dmIsolytic.tblInformation.FieldByName('FirstName').AsString);
  Email := InputBox('Input', 'Edit Email:', dmIsolytic.tblInformation.FieldByName('Email').AsString);

  // Validate inputs
  if not ValidateInput(FirstName, 'First Name') or
     not ValidateInput(Email, 'Email') then
    Exit;

  try
    dmIsolytic.tblInformation.Edit;
    dmIsolytic.tblInformation.FieldByName('FirstName').AsString := FirstName;
    dmIsolytic.tblInformation.FieldByName('Email').AsString := Email;
    dmIsolytic.tblInformation.Post;

    LogAction('Record edited: Username - ' + dmIsolytic.tblInformation.FieldByName('UserName').AsString);
    ShowMessage('Record successfully edited.');
  except
    on E: Exception do
    begin
      ShowMessage('Error editing record: ' + E.Message);
      LogAction('Error editing record: ' + E.Message);
    end;
  end;
end;

// Procedure to view all records
// Procedure to view all user information except password
// Procedure to view all user information except password
procedure TfrmAdmin.btnViewClick(Sender: TObject);
var
  UserName, FirstName, Email: string;
  Abs, Calves, DietStreak, WorkoutStreak, WorkoutsCompleted: Integer;  // Assuming these fields are of type Integer
  Biceps, Back, Glutes, Quads, Shoulders: Integer; // Additional stats
  AdditionalInfo: string;
begin
  if not dmIsolytic.tblInformation.IsEmpty then
  begin
    // Get the selected user's information
    UserName := dmIsolytic.tblInformation.FieldByName('UserName').AsString;
    FirstName := dmIsolytic.tblInformation.FieldByName('FirstName').AsString;
    Email := dmIsolytic.tblInformation.FieldByName('Email').AsString;
    Abs := dmIsolytic.tblInformation.FieldByName('Abs').AsInteger;               // Fetching Abs stat
    Calves := dmIsolytic.tblInformation.FieldByName('Calves').AsInteger;         // Fetching Calves stat
    DietStreak := dmIsolytic.tblInformation.FieldByName('DietStreak').AsInteger; // Fetching DietStreak
    WorkoutStreak := dmIsolytic.tblInformation.FieldByName('WorkoutStreak').AsInteger; // Fetching WorkoutStreak
    WorkoutsCompleted := dmIsolytic.tblInformation.FieldByName('WorkoutsCompleted').AsInteger; // Fetching WorkoutsCompleted
    Biceps := dmIsolytic.tblInformation.FieldByName('Biceps').AsInteger;         // Fetching Biceps stat
    Back := dmIsolytic.tblInformation.FieldByName('Back').AsInteger;             // Fetching Back stat
    Glutes := dmIsolytic.tblInformation.FieldByName('Glutes').AsInteger;         // Fetching Glutes stat
    Quads := dmIsolytic.tblInformation.FieldByName('Quads').AsInteger;           // Fetching Quads stat
    Shoulders := dmIsolytic.tblInformation.FieldByName('Shoulders').AsInteger;   // Fetching Shoulders stat

    // Prepare additional information string
    AdditionalInfo := Format('User Information:%sUserName: %s%sFirst Name: %s%sEmail: %s%s' +
      'Abs: %d%sCalves: %d%sDiet Streak: %d%sWorkout Streak: %d%sWorkouts Completed: %d%s' +
      'Biceps: %d%sBack: %d%sGlutes: %d%sQuads: %d%sShoulders: %d',
      [sLineBreak, UserName, sLineBreak, FirstName, sLineBreak, Email, sLineBreak,
      Abs, sLineBreak, Calves, sLineBreak, DietStreak, sLineBreak, WorkoutStreak, sLineBreak,
      WorkoutsCompleted, sLineBreak, Biceps, sLineBreak, Back, sLineBreak, Glutes, sLineBreak,
      Quads, sLineBreak, Shoulders]);

    // Display the user's information in a message box
    ShowMessage(AdditionalInfo);

    // Log the action
    LogAction('Viewed information for User: ' + UserName);
  end
  else
    ShowMessage('No record selected to view.');
end;


end.

